    class Progression:
        """Iterator producing a generic progression.

        Default iterator produces the whole numbers 0, 1, 2, ...
        """

        def __init__(self, start=0):
            """Initialize current to the first value of the progression."""
            self._current = start 

        def _advanced(self):
            """Update self._current to a new value.

            This should be overridden by a subclass to customize progression.

            By convention, if current is set to None, this designates the end of a finite progression.
            """
            self._current += 1

        def __next__(self):
            """Return the next element, or else raise StopIteration error."""
            if self._current is None:           # our convention to end a progression
                raise StopIteration()
            else:
                answer = self._current          # record current value to return
                self._advance()                 # advance to prepare for next time
                return answer                   # return answer


        def __iter__(self):
            """By convention, an iterator must return itself as an iterator."""
            return self

        def print_progression(self, n):
            """Print next n values of the progression."""
            print(' '.join(str(next(self)) for j in range(n)))

    # the constructor for this class accepts a starting value for the progression (0 by default) and
    # initializes a data member, self._current, to that value.
    # The Progression class implements the conventions of a python iterator using special methods
    # of __next__ and __iter__
